name: Docker
description: Runs command in our development Docker image
inputs:
  command:
    description: Shell command to run in Docker
    required: true
  play_store_upload_key:
    description: Base64-encoded upload keystore
    required: true
  keystore_key_alias:
    description: Name of key in the keystore
    required: true
  keystore_key_password:
    description: Password to the key in the keystore
    required: true
  keystore_store_password:
    description: Store password to the key in the keystore
    required: true
  play_store_config_json:
    description: Google Play JSON service account key
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout treeless version
      # This converts shallow clone performed using `git clone --depth=1` by
      # `actions/checkout` to treeless clone where command `git describe --tags`
      # works.
      shell: bash
      run: |
        rm -rf .* * || echo "Ignoring rm failure"
        git clone --filter=tree:0 https://github.com/${{ github.repository }} .
        git checkout ${{ github.sha }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers and Dart packages
      uses: actions/cache@v3
      with:
        path: |
          /tmp/.buildx-cache
          /tmp/.pub-cache
        key: ${{ runner.os }}-cache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cache-

    - name: Build development Docker image
      uses: docker/build-push-action@v4
      with:
        # Load the built image into local Docker. Used in the next step.
        load: true
        context: .
        tags: ididit
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        # Run as root to prevent file permission errors in GitHub Actions. See
        # https://stackoverflow.com/a/61024770.
        build-args: |
          USER=root

    - name: Configure Android signing
      working-directory: android
      shell: bash
      run: |
        echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
        echo "storeFile=upload-keystore.jks" >> key.properties
        echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
        echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
        echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
      env:
        PLAY_STORE_UPLOAD_KEY: ${{ inputs.play_store_upload_key }}
        KEYSTORE_KEY_ALIAS: ${{ inputs.keystore_key_alias }}
        KEYSTORE_KEY_PASSWORD: ${{ inputs.keystore_key_password }}
        KEYSTORE_STORE_PASSWORD: ${{ inputs.keystore_store_password }}

    - name: Configure Google Play API access
      working-directory: android
      shell: bash
      run: |
        echo "$PLAY_STORE_CONFIG_JSON" > play-store-api.json
      env:
        PLAY_STORE_CONFIG_JSON: ${{ inputs.play_store_config_json }}

    - name: Ensure Dart package cache directory exists
      # Otherwise Docker mount below fails if the directory doesn't exist.
      shell: bash
      run: mkdir -p /tmp/.pub-cache

    - name: Run command in Docker
      shell: bash
      run: >
        docker run --rm -t
        --mount type=bind,source="$(pwd)",target=/workspaces/ididit/
        --mount type=bind,source=/tmp/.pub-cache,target=/home/root/flutter/.pub-cache/
        -w /workspaces/ididit ididit sh -c "${{ inputs.command }}"

    - name: Move Docker cache
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Permit Dart package cache access to everyone
      # This is needed to avoid permission errors when packing up the cache.
      # Similar to https://github.com/actions/virtual-environments/issues/1337.
      shell: bash
      run: sudo chmod -R a+rwx /tmp/.pub-cache
